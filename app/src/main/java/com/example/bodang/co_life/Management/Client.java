package com.example.bodang.co_life.Management;/** * */import com.example.bodang.co_life.Objects.Carrier;import com.example.bodang.co_life.Objects.ContentType;import com.example.bodang.co_life.Objects.DefinedLocation;import com.example.bodang.co_life.Objects.Message;import com.example.bodang.co_life.Objects.Notice;import com.example.bodang.co_life.Objects.Room;import com.example.bodang.co_life.Objects.User;import com.example.bodang.co_life.Objects.UserLocation;import java.io.IOException;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.net.InetSocketAddress;import java.net.Socket;import java.net.UnknownHostException;import java.util.ArrayList;/** * This is the Class for communicate with the server, also including methods for different types of interaction with the server. */public class Client {    private Socket socket;    static ObjectInputStream in;    static ObjectOutputStream out;    Carrier carrierSent;    //Connect the server and create ObjectOutputStream and ObjectInputStream.    // If connect server successfully, return 1, else return different values depending on the situation    public int Init() {        try {            socket = new Socket();            socket.connect(new InetSocketAddress("121.42.196.2", 80), 5000);            out = new ObjectOutputStream(socket.getOutputStream());            in = new ObjectInputStream(socket.getInputStream());            return 1;        } catch (UnknownHostException e) {            // TODO Auto-generated catch block            e.printStackTrace();            return 0;        } catch (IOException e) {            e.printStackTrace();            // TODO Auto-generated catch block            e.printStackTrace();            return -1;        }    }    //used for deal with the interaction between client and server when the user log in.    public Boolean[] Login(String name, String password) {        String[] check;        Boolean[] checkresult = {false, false};        User user = new User();        user.setUserId(name);        user.setUserPassword(password);        carrierSent = new Carrier(user, ContentType.login, name);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            check = (String[]) carrierReceived.getObject();            if (check[0].equals("true")) {                checkresult[0] = true;            }            if (check[1].equals("true")) {                checkresult[1] = true;            }            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return checkresult;    }    //used for deal with the interaction between client and server when update the user's location    public boolean UpdateLocation(String username, double longitude, double latitude) {        boolean result = false;        UserLocation location = new UserLocation(longitude, latitude);        carrierSent = new Carrier(location, ContentType.updatelocation, username);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            result = (boolean) carrierReceived.getObject();            close();        } catch (Exception e) {            e.printStackTrace();        }        return result;    }    //used for deal with the interaction between client and server when the user join in a room.    public boolean JoinRoom(String username, String roomid, String roompassword) {        boolean roomCheckResult = false;        int roomID = Integer.parseInt(roomid);///////need to judgy whether null/size=0/not int?        Room roomToSend = new Room(roomID, roompassword);        carrierSent = new Carrier(roomToSend, ContentType.joinroom, username);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            roomCheckResult = (boolean) carrierReceived.getObject();            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return roomCheckResult;    }    //used for deal with the interaction between client and server when the user create a room.    public int createroom(String username, String password) {        int roomId = 0;        Room roomToSend = new Room(roomId, password);        carrierSent = new Carrier(roomToSend, ContentType.createroom, username);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            roomId = (int) carrierReceived.getObject();            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return roomId;    }    //used for deal with the interaction between client and server when getting the list of users in the same room with the user.    public ArrayList groupList(String username) {        ArrayList<User> groupList = new ArrayList<>();        Carrier carrierSent = new Carrier(null, ContentType.getgrouplist, username);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            groupList = (ArrayList<User>) carrierReceived.getObject();            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return groupList;    }    //used for deal with the interaction between client and server while getting the list of notices on the blackboard.    public ArrayList getBlackboardNoticeList(String username) {        ArrayList<Notice> noticeList = new ArrayList<>();        Carrier carrierSent = new Carrier(null, ContentType.getBlackboardNoticelist, username);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            noticeList = (ArrayList<Notice>) carrierReceived.getObject();            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return noticeList;    }    //used for deal with the interaction between client and server while getting the latest notice on the blackboard.    public Notice getNewNoticeOnBlackboard(String username) {        Notice notice = null;        Carrier carrierSent = new Carrier(null, ContentType.getNewBlackboardNotice, username);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            notice = (Notice) carrierReceived.getObject();            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return notice;    }    //used for deal with the interaction between client while getting the roomId    public int roomId(String username) {        int roomId = 0;        carrierSent = new Carrier(username, ContentType.getRoomId, username);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            roomId = (int) carrierReceived.getObject();            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return roomId;    }    //used for deal with the interaction between client and server while getting the message list    public ArrayList<Message> readMessage(String username) {        ArrayList<Message> messageList = new ArrayList<Message>();        carrierSent = new Carrier(null, ContentType.readMessage, username);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            messageList = (ArrayList<Message>) carrierReceived.getObject();            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return messageList;    }    //used for deal with the interaction between client and server when the user send a message    public boolean sendMessage(String username, Message message) {        boolean successSend = false;        carrierSent = new Carrier(message, ContentType.insertMessage, username);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            successSend = (boolean) carrierReceived.getObject();            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        System.out.println("sendsuccess" + successSend);        return successSend;    }    //used for deal with the interaction between client and server when the user upload a notice on blackboard.    public boolean uploadNotice(String username, String content) {        boolean uploadSuccessful = false;        carrierSent = new Carrier(content, ContentType.uploadNotice, username);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            uploadSuccessful = (boolean) carrierReceived.getObject();            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return uploadSuccessful;    }    //used for deal with the interaction between client and server while getting the the list of defined location.    public ArrayList<DefinedLocation> getDefinedLocations(String username) {        ArrayList<DefinedLocation> definedLocationList = new ArrayList<DefinedLocation>();        carrierSent = new Carrier(null, ContentType.getDefinedLocation, username);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            definedLocationList = (ArrayList<DefinedLocation>) carrierReceived.getObject();            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return definedLocationList;    }    //used for deal with the interaction between client and server when the user define a location (give it name and type.)    public boolean addDefinedLocation(DefinedLocation definedLocation, String username) {        boolean addLocationSuccessful = false;        carrierSent = new Carrier(definedLocation, ContentType.addDefinedLocation, username);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            addLocationSuccessful = (boolean) carrierReceived.getObject();            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return addLocationSuccessful;    }    //used for deal with the interaction between client and server when the user delete a defined location.    public boolean deleteDefinedLocation(String definedLocation, String username) {        boolean deleteLocationSuccessful = false;        carrierSent = new Carrier(definedLocation, ContentType.deleteDefinedLocation, username);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            deleteLocationSuccessful = (boolean) carrierReceived.getObject();            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return deleteLocationSuccessful;    }    //used for deal with the interaction between client and server while sending the object.    public synchronized void send(Carrier carrier, ObjectOutputStream out) {        try {            out.writeObject(carrier);            out.flush();            notify();        } catch (IOException e) {            close();            e.printStackTrace();        }    }    //close these object output/input streams.    public void close() {        try {            if (out != null) {                out.flush();                in.close();                out.close();            }        } catch (IOException e) {            e.printStackTrace();        }    }}