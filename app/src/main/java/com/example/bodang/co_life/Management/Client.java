package com.example.bodang.co_life.Management;/** * Created by Bodang on 27/10/2016. */import com.example.bodang.co_life.Objects.Carrier;import com.example.bodang.co_life.Objects.ContentType;import com.example.bodang.co_life.Objects.Message;import com.example.bodang.co_life.Objects.Notice;import com.example.bodang.co_life.Objects.Room;import com.example.bodang.co_life.Objects.User;import com.example.bodang.co_life.Objects.UserLocation;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.io.OutputStreamWriter;import java.io.PrintWriter;import java.net.InetSocketAddress;import java.net.ServerSocket;import java.net.Socket;import java.net.UnknownHostException;import java.util.ArrayList;public class Client {    private Socket socket;    static ObjectInputStream in;    static ObjectOutputStream out;    Carrier carrierSent;//    public int Init() {        try {            socket = new Socket();            socket.connect(new InetSocketAddress("121.42.196.2", 80), 5000);            out = new ObjectOutputStream(socket.getOutputStream());            in = new ObjectInputStream(socket.getInputStream());            return 1;        } catch (UnknownHostException e) {            // TODO Auto-generated catch block            e.printStackTrace();            return 0;        } catch (IOException e) {            e.printStackTrace();            // TODO Auto-generated catch block            e.printStackTrace();            return -1;        }    }    public Boolean[] Login(String name, String password) {        String[] check;        Boolean[] checkresult = {false, false};        User user = new User();        user.setUserId(name);        user.setUserPassword(password);        carrierSent = new Carrier(user, ContentType.login, name);        send(carrierSent, out);        System.out.println(carrierSent.getSender() + "!!!!!!!!!!!!!!!");        try {            Carrier carrierReceived = (Carrier) in.readObject();            check = (String[]) carrierReceived.getObject();            if (check[0].equals("true")) {                checkresult[0] = true;            }            if (check[1].equals("true")) {                checkresult[1] = true;            }            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return checkresult;    }    public boolean UpdateLocation(String username, double longitude, double latitude) {        boolean result = false;        UserLocation location = new UserLocation(longitude, latitude);        carrierSent = new Carrier(location, ContentType.updatelocation, username);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            result = (boolean) carrierReceived.getObject();            close();        } catch (Exception e) {            e.printStackTrace();        }        return result;    }    public boolean JoinRoom(String username, String roomid, String roompassword) {        boolean roomCheckResult = false;        int roomID = Integer.parseInt(roomid);///////need to judgy whether null/size=0/not int?        Room roomToSend = new Room(roomID, roompassword);        carrierSent = new Carrier(roomToSend, ContentType.joinroom, username);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            roomCheckResult = (boolean) carrierReceived.getObject();            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return roomCheckResult;    }    public int createroom(String username, String password) {        int roomId = 0;        Room roomToSend = new Room(roomId, password);        carrierSent = new Carrier(roomToSend, ContentType.createroom, username);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            roomId = (int) carrierReceived.getObject();            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return roomId;    }    public ArrayList groupList(String username) {        ArrayList<User> groupList = new ArrayList<>();        Carrier carrierSent = new Carrier(null, ContentType.getgrouplist, username);//不知道send null 行不行        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            groupList = (ArrayList<User>) carrierReceived.getObject();            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return groupList;    }    public ArrayList getBlackboardNoticeList(String username){        ArrayList<Notice> noticeList=new ArrayList<>();        Carrier carrierSent = new Carrier(null, ContentType.getBlackboardNoticelist, username);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            noticeList = (ArrayList<Notice>) carrierReceived.getObject();            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return noticeList;        //testing data//        ArrayList<Notice> noticelist =new ArrayList<Notice>();//        noticelist.add(new Notice("Bo","I have an apple","2016",2016));//        noticelist.add(new Notice("Boyu","I have a pinapple","2017",2016));//        return noticelist;    }    public Notice getNewNoticeOnBlackboard(String username) {        Notice notice=null;        System.out.println("getNewNoticehaha3");        Carrier carrierSent = new Carrier(null, ContentType.getNewBlackboardNotice, username);        System.out.println("getNewNoticehaha2");        send(carrierSent, out);        System.out.println("getNewNoticehaha1");        try {            System.out.println("getNewNoticehaha");            Carrier carrierReceived = (Carrier) in.readObject();            System.out.println(carrierReceived.getObject().toString()+"noticeNew");            notice = (Notice) carrierReceived.getObject();            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return notice;    }    public int roomId(String username) {        int roomId = 0;        carrierSent = new Carrier(username, ContentType.getRoomId, username);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            roomId = (int) carrierReceived.getObject();            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return roomId;    }    public ArrayList<Message> readMessage(String username){        ArrayList<Message> messageList=new ArrayList<Message>();        carrierSent = new Carrier(null, ContentType.readMessage, username);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            messageList = (ArrayList<Message>) carrierReceived.getObject();            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return messageList;    }    public boolean sendMessage(String username, Message message){        boolean successSend=true;        carrierSent = new Carrier(message, ContentType.insertMessage, username);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            successSend = (boolean) carrierReceived.getObject();            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return successSend;    }    public boolean uploadNotice(String username, String content) {        boolean uploadSuccessful=false;        carrierSent = new Carrier(content, ContentType.uploadNotice, username);        send(carrierSent, out);        try {            Carrier carrierReceived = (Carrier) in.readObject();            uploadSuccessful = (boolean) carrierReceived.getObject();            close();        } catch (Exception e) {            close();            e.printStackTrace();        }        return uploadSuccessful;    }    public synchronized void send(Carrier carrier, ObjectOutputStream out) {        try {            out.writeObject(carrier);            out.flush();            notify();        } catch (IOException e) {            close();            e.printStackTrace();        }    }    public void close() {        try {            out.flush();            in.close();            out.close();        } catch (IOException e) {            e.printStackTrace();        }    }}